[gd_scene load_steps=2 format=3 uid="uid://co21y63e176p6"]

[sub_resource type="GDScript" id="GDScript_gfiix"]
resource_name = "POGR_API"
script/source = "extends HTTPRequest

var thread: Thread = Thread.new()
var mutex: Mutex = Mutex.new()
var close_request: bool = false

var config: ConfigFile = ConfigFile.new()

func _ready() -> void:
	request_completed.connect(_on_request_completed)
	thread.start(api_request)
	thread.wait_to_finish()

func _notification(what):
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		get_tree().set_auto_accept_quit(false)
		thread.start(api_request)
		thread.wait_to_finish()
		close_request = true

func api_request() -> void:
	mutex.lock()
	config.load(\"res://addons/pogr_plugin/pogr.cfg\")
	request(config.get_value(\"api\",\"api_url\",\"\"), [\"CLIENT_ID: \" + config.get_value(\"api\",\"client_id\",\"\"), \"BUILD_ID: \" + config.get_value(\"api\",\"build_id\",\"\")])
	mutex.unlock()

func _on_request_completed(_result, _response_code, _headers, body) -> void:
	var json: Dictionary = JSON.parse_string(body.get_string_from_utf8())
	if(json[\"headers\"]):
		print(json[\"headers\"])
	if(close_request):
		get_tree().quit()

func _exit_tree() -> void:
	thread.wait_to_finish()
"

[node name="POGR_Manager" type="HTTPRequest"]
script = SubResource("GDScript_gfiix")
